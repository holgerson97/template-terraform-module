name: "Terraform"

on:
  push:
    branches:
      - main
      - stage
  pull_request:
    branches:
      - main
      - stage

defaults:
  run:
    shell: bash

jobs:
     
  terraform_format_validate:

    name: Format and validate Terraform Code Base
    runs-on: ubuntu-latest

    strategy:
      matrix:
        terraform_version: [ 1.0 ]

    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ matrix.terraform_version }}
     
      - name: Terraform init
        id: terraInit
        run: terraform init

      - name: Terraform format
        id: terraFormat
        run: terraform fmt -recursive -no-color -check

  golang_format_vet:

    name: Format and vet Golang Code Base
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./terratests

    strategy:
      matrix:
        go_version: [ 1.16.5 ]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go_version }}

      - name: Go format
        id: goFormat
        run: go fmt .
      
      - name: Go vet
        id: goVet
        run: go vet .

  terratests:

    name: Run Terratests against Terraform Code Base
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./terratests

    strategy:
      matrix:
        terraform_version: [ 1.0 ]
        go_version: [ 1.16.5 ]

    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ matrix.terraform_version }}
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go_version }}

      - name: Run Terratests
        id: runTerratests
        run: go test -v -timeout 60m
        working-directory: ./terratests